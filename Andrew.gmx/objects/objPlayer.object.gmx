<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>sprAndrewBoundingBox</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///init
//The player's mask or MASTER object
//this object moves and draws sprites over itself
initialize_movement_entity(1,.5,0,0,objSolidParent);
spriteDirection = "right"; //which set of sprites to use

//aim direction
upperState = "idle"; //states: idle/level/angle/up

//weapon type
weaponType = "none" //states: potato/catalyst/alkalyst/paralyst/lazalyst

//state of quickselect menu
showQuickMenu = "idle";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///movement
//input vars
leftkey = global.leftkey;
rightkey = global.rightkey;
jumpstart = global.jumpstart;
jumpend = global.jumpend;

//horizontal input
enable_movement_run_horizontal(1,4,rightkey,leftkey);

//jump input
enable_movement_jump(13,jumpstart,jumpend);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///aiming
//input
aimup = global.aimup;
aimdown = global.aimdown;

//aiming
if aimup {
    switch(upperState){
        case "idle": 
        case "level": upperState = "angle"; break;
        case "angle": upperState = "up"; break;
    }
}

if aimdown {
    switch(upperState){
        case "up": upperState = "angle"; break;
        case "angle": upperState = "level"; break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///firing
//controls
firekey = global.firekey;

//check weapon type
var bullObj = objProjectile;
var bullspeed = 10;

if firekey{
    switch(upperState){
        case "idle": 
            upperState = "level";
        case "level":
            if spriteDirection == "left" scr_create_position_speed_direction(bullObj,x+24,y+10,bullspeed,180);
            if spriteDirection == "right" scr_create_position_speed_direction(bullObj,x+24,y+10,bullspeed,0);
            break;
        case "angle":
            if spriteDirection == "left" scr_create_position_speed_direction(bullObj,x+24,y+10,bullspeed,135);
            if spriteDirection == "right" scr_create_position_speed_direction(bullObj,x+24,y+10,bullspeed,45);
            break;
        case "up":
            scr_create_position_speed_direction(bullObj,x+24,y+10,bullspeed,90);
            break;
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///choose sprite
//reset image_speed
image_speed = 0;

//choose spriteset
if (hspd &gt; 0){
    spriteDirection = "right";
} else if (hspd &lt; 0){
    spriteDirection = "left";
}

//choose image index
//check air
if (!place_meeting(x, y+1, collision_object)) {
    if (vspd &gt; 0) { // if falling
        image_index = 8;
    } else { // else going up
        image_index = 7;
    }
} else {
    //on ground
    //check moving
    if (hspd !=0) {
        image_speed = 0.5;
        if 1 &gt; image_index or image_index &gt; 7 {
            image_index = 1;
        }
    } else {
        //idle
        image_index  = 0;
    }
}

//choose sprite
switch(upperState){
    case "idle": 
        if (spriteDirection == "left") sprite_index = sprAndrewLeft;
        if (spriteDirection == "right") sprite_index = sprAndrewRight;
        break;
    case "level": 
        if (spriteDirection == "left") sprite_index = sprAndrewLeftShoot;
        if (spriteDirection == "right") sprite_index = sprAndrewRightShoot;
        break;
    case "angle": 
        if (spriteDirection == "left") sprite_index = sprAndrewLeftShootDiag;
        if (spriteDirection == "right") sprite_index = sprAndrewRightShootDiag;
        break;
    case "up": 
        if (spriteDirection == "left") sprite_index = sprAndrewLeftShootUp;
        if (spriteDirection == "right") sprite_index = sprAndrewRightShootUp;
        break;
}











</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///execute movement

//move
move_movement_entity();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
