<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>sprAndrewBoundingBox</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///init
//The player's mask or MASTER object
//this object moves and draws sprites over itself
initialize_movement_entity(1,1,1,0,objSolidParent);
spriteDirection = "right"; //which set of sprites to use

//aim direction
upperState = "idle"; //states: idle/level/angle/up

//weapon type
weaponType = "potato"; //states: potato/catalyst/alkalyst/paralyst/lazaryst

//charge vars
charging = false;
//  chargeState = "none"; //medium, full
chargevalue = 0;
mediumCharge = 15;
fullCharge = 60;

//state of quickselect menu
showQuickMenu = "idle";

//time till aiming reset


//draw vars
drawIndexCharge = 0;
drawSpeedCharge = 0.5;
drawValueMedCharge = (mediumCharge + fullCharge) / 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///movement
//input vars
leftkey = global.leftkey;
rightkey = global.rightkey;
jumpstart = global.jumpstart;
jumpend = global.jumpend;

//horizontal input
enable_movement_run_horizontal(1,4,rightkey,leftkey);

//jump input
enable_movement_jump(12,jumpstart,jumpend);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///aiming
//input
aimup = global.aimup;
aimdown = global.aimdown;

//aiming
//aim up
if aimup {
    switch(upperState){
        case "idle": 
        case "level": upperState = "angle"; break;
        case "angle": upperState = "up"; break;
    }
}
//aim down
if aimdown {
    switch(upperState){
        case "up": upperState = "angle"; break;
        case "angle": upperState = "level"; break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///firing + charge
//controls
firekey = global.firekey;
chargekey = global.chargekey;
firekeyrelease = global.firekeyrelease;

//fire and create bullet
if (firekey &amp;&amp; showQuickMenu=="idle"){
    scrPlayerFireBullet(weaponType,upperState);
    if upperState == "idle" upperState = "level";
}

//charge
if (chargekey &amp;&amp; chargevalue &lt; fullCharge+1){
    chargevalue++;
}

if (firekeyrelease &amp;&amp; showQuickMenu=="idle"){
    if (chargevalue &lt; mediumCharge){
            //fire nothing
            chargevalue = 0;
            drawIndexCharge = 0;
    }
    if (chargevalue &gt;= mediumCharge &amp;&amp; chargevalue &lt; fullCharge){
            //fire mediumcharge bullet
            scrPlayerFireMediumcharge(weaponType,upperState);
            if upperState == "idle" upperState = "level";
            chargevalue = 0;
            drawIndexCharge = 0;
    }
    if (chargevalue &gt;= fullCharge){
            //fire fullcharge bullet
            scrPlayerFireFullcharge(weaponType,upperState);
            if upperState == "idle" upperState = "level";
            chargevalue = 0;
            drawIndexCharge = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///choose sprite
//reset image_speed
image_speed = 0;

//#choose spriteset
if (hspd &gt; 0){
    spriteDirection = "right";
} else if (hspd &lt; 0){
    spriteDirection = "left";
}

//#choose image index
//check air
if (!place_meeting(x, y+1, collision_object)) {
    if (vspd &gt; 0) { // if falling
        image_index = 8;
    } else { // else going up
        image_index = 7;
    }
} else {
    //on ground
    //check moving
    if (hspd !=0) {
        image_speed = 0.5;
        if 1 &gt; image_index or image_index &gt; 6 {
            image_index = 1;
        }
    } else {
        //idle
        image_index  = 0;
    }
}

//#choose sprite
switch(upperState){
    case "idle": 
        if (spriteDirection == "left") sprite_index = sprAndrewLeft;
        if (spriteDirection == "right") sprite_index = sprAndrewRight;
        break;
    case "level": 
        if (spriteDirection == "left") sprite_index = sprAndrewLeftShoot;
        if (spriteDirection == "right") sprite_index = sprAndrewRightShoot;
        break;
    case "angle": 
        if (spriteDirection == "left") sprite_index = sprAndrewLeftShootDiag;
        if (spriteDirection == "right") sprite_index = sprAndrewRightShootDiag;
        break;
    case "up": 
        if (spriteDirection == "left") sprite_index = sprAndrewLeftShootUp;
        if (spriteDirection == "right") sprite_index = sprAndrewRightShootUp;
        break;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///execute movement
move_movement_entity();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///quickselect
//controls
quickselectup = global.quickselectup; //up face
quickselectleft = global.quickselectleft; //left face
quickselectdown = global.quickselectdown; //down face
quickselectright = global.quickselectright; //right face

startkey = global.startkey; //start button

//press start to "show" menu
switch(showQuickMenu){
    case "idle": //startkey
        if startkey {
            showQuickMenu = "show";
        }
        break;
    case "show": //exit or choose weapon
        //exit menu
        if startkey {
            showQuickMenu = "idle";
        }
        //select weapon
        //catalyst
        if quickselectup and global.unlockCatalyst{
            switch(weaponType){
                case "catalyst": weaponType = "potato"; break;
                
                case "potato": weaponType = "catalyst"; break;
                case "alkalyst": weaponType = "catalyst"; break;
                case "paralyst": weaponType = "catalyst"; break;
                case "lazaryst": weaponType = "catalyst"; break;
            }
            showQuickMenu = "selectup";
        }
        //alkalyst
        if quickselectright and global.unlockAlkalyst{
            switch(weaponType){
                case "alkalyst": weaponType = "potato"; break;
                
                case "potato": weaponType = "alkalyst"; break;
                case "catalyst": weaponType = "alkalyst"; break;
                case "paralyst": weaponType = "alkalyst"; break;
                case "lazaryst": weaponType = "alkalyst"; break;
            }
            showQuickMenu = "selectright";
        }
        //paralyst
        if quickselectdown and global.unlockParalyst{
            switch(weaponType){
                case "paralyst": weaponType = "potato"; break;
                
                case "potato": weaponType = "paralyst"; break;
                case "catalyst": weaponType = "paralyst"; break;
                case "alkalyst": weaponType = "paralyst"; break;
                case "lazaryst": weaponType = "paralyst"; break;
            }
            showQuickMenu = "selectdown";
        }
        //lazaryst
        if quickselectleft and global.unlockLazaryst{
            switch(weaponType){
                case "lazaryst": weaponType = "potato"; break;
                
                case "potato": weaponType = "lazaryst"; break;
                case "catalyst": weaponType = "lazaryst"; break;
                case "alkalyst": weaponType = "lazaryst"; break;
                case "paralyst": weaponType = "lazaryst"; break;
            }
            showQuickMenu = "selectleft";
        }
        break;
    case "selectup": //selection effect up
        showQuickMenu = "idle";
        break;
    case "selectright": //selection effect right
        showQuickMenu = "idle";
        break;
    case "selectdown": //selection effect down
        showQuickMenu = "idle";
        break;
    case "selectleft": //selection effect left
        showQuickMenu = "idle";
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw quickselect menu including unlocks
if (showQuickMenu == "show") {
    //screen is 256x224 center is 128/112
    //frame is 96x96
    //draw frame on 128+48/112+48
    //icons are 22x22
    //draw icons on 128+11+fdis/112+11+fdis
    //offset vars
    var fx = 128-48; //frame draw x
    var fy = 100-48; //frame draw y
    var ix = 128-11; //icon draw x
    var iy = 100-11; //icon draw y
    var fdis = 37; //frame distance x-fx,y-fy
    
    //frame
    draw_sprite(sprGuiQuickSelect,0,fx,fy)
    
    //upper icon
    if (weaponType == "catalyst" and global.unlockCatalyst) draw_sprite(sprGuiQuickSelectIcons,0,ix,iy-fdis);
    else if (global.unlockCatalyst) draw_sprite(sprGuiQuickSelectIcons,1,ix,iy-fdis);
    
    ///right icon
    if (weaponType == "alkalyst" and global.unlockAlkalyst) draw_sprite(sprGuiQuickSelectIcons,0,ix+fdis,iy);
    else  if (global.unlockAlkalyst) draw_sprite(sprGuiQuickSelectIcons,2,ix+fdis,iy);
    
    ///bottom icon
    if (weaponType == "paralyst" and global.unlockParalyst) draw_sprite(sprGuiQuickSelectIcons,0,ix,iy+fdis);
    else  if (global.unlockParalyst) draw_sprite(sprGuiQuickSelectIcons,3,ix,iy+fdis);
    
    ///left icon
    if (weaponType == "lazaryst" and global.unlockLazaryst) draw_sprite(sprGuiQuickSelectIcons,0,ix-fdis,iy);
    else  if (global.unlockLazaryst) draw_sprite(sprGuiQuickSelectIcons,4,ix-fdis,iy);
    
    //middle icon
    switch (weaponType){
        case "potato": draw_sprite(sprGuiQuickSelectIcons,0,ix,iy); break;
        case "catalyst": draw_sprite(sprGuiQuickSelectIcons,1,ix,iy); break;
        case "alkalyst": draw_sprite(sprGuiQuickSelectIcons,2,ix,iy); break;
        case "paralyst": draw_sprite(sprGuiQuickSelectIcons,3,ix,iy); break;
        case "lazaryst": draw_sprite(sprGuiQuickSelectIcons,4,ix,iy); break;
    }   
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw self
draw_self();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw charging thing
var drawCharge = 0;
if (chargevalue &gt; mediumCharge){
    if (chargevalue &lt;= drawValueMedCharge){
        switch(weaponType){
            case "potato": drawCharge = sprChargePotatoLow; break;
            case "catalyst": drawCharge = sprChargeCatalystLow; break;
            case "alkalyst": drawCharge = sprChargeAlkalystLow; break;
            case "paralyst": drawCharge = sprChargeParalystLow; break;
            case "lazaryst": drawCharge = sprChargeLazarystLow; break;
        }
    }
    if (chargevalue &gt; drawValueMedCharge &amp;&amp; chargevalue &lt;= fullCharge){
        switch(weaponType){
            case "potato": drawCharge = sprChargePotatoMed; break;
            case "catalyst": drawCharge = sprChargeCatalystMed; break;
            case "alkalyst": drawCharge = sprChargeAlkalystMed; break;
            case "paralyst": drawCharge = sprChargeParalystMed; break;
            case "lazaryst": drawCharge = sprChargeLazarystMed; break;
        }
    }
    if (chargevalue &gt; fullCharge){
        switch(weaponType){
            case "potato": drawCharge = sprChargePotatoFull; break;
            case "catalyst": drawCharge = sprChargeCatalystFull; break;
            case "alkalyst": drawCharge = sprChargeAlkalystFull; break;
            case "paralyst": drawCharge = sprChargeParalystFull; break;
            case "lazaryst": drawCharge = sprChargeLazarystFull; break;
        }
    }
    switch(upperState){
        case "level":
            if spriteDirection == "left" draw_sprite(drawCharge,drawIndexCharge,x+1,y+14);
            if spriteDirection == "right" draw_sprite(drawCharge,drawIndexCharge,x+43,y+14);
            break;
        case "angle":
            if spriteDirection == "left" draw_sprite(drawCharge,drawIndexCharge,x+5,y+1);
            if spriteDirection == "right" draw_sprite(drawCharge,drawIndexCharge,x+38,y+1);
            break;
        case "up":
            if spriteDirection == "left" draw_sprite(drawCharge,drawIndexCharge,x+16,y-4);
            if spriteDirection == "right" draw_sprite(drawCharge,drawIndexCharge,x+27,y-4);
            break;
    }
    
    drawIndexCharge += drawSpeedCharge;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///dev draw info
draw_text(x+32,y-32,chargevalue);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
