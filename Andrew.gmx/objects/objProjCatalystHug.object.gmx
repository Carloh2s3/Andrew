<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprChargeCatalystMed</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_dryseason_hugger</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//init projectile
damage = 0;

//init hugger object
//directions
floor_direction = 270;
move_direction = "right";
move_angle = 0;

//virtual speed
hspd = 0;
vspd = 0;

//iterator variable
i = 0;
iCorr = 0;
corrAccel = 24;
xCorr = false;
yCorr = false;

//collisions
upcheck = false;
downcheck = false;
rightcheck = false;
leftcheck = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///correction acceleration (all movement)
while(iCorr &lt; corrAccel){
    //check for collisions
    upcheck = place_meeting(x,y-1,obj_wall);
    downcheck = place_meeting(x,y+1,obj_wall);
    leftcheck = place_meeting(x-1,y,obj_wall);
    rightcheck = place_meeting(x+1,y,obj_wall);
    
    //decide stuck
    if (upcheck and downcheck and leftcheck and rightcheck) exit;
    
    //decide direction of floor
    if upcheck floor_direction = 90;
    if downcheck floor_direction = 270;
    if leftcheck floor_direction = 180;
    if rightcheck floor_direction = 0;
    
    switch(move_direction){
        case "right":
            if upcheck and leftcheck floor_direction = 180;
            if upcheck and rightcheck floor_direction = 90;
            if downcheck and leftcheck floor_direction = 270;
            if downcheck and rightcheck floor_direction = 0;
            //if no collision is found, find new floor
            if !upcheck and !downcheck and !leftcheck and !rightcheck{
                switch(floor_direction){
                case 0:
                    x+=1; floor_direction = 270; break;
                case 90:
                    y-=1; floor_direction = 0; break;
                case 180:
                    x-=1; floor_direction = 90; break;
                case 270:
                    y+=1; floor_direction = 180; break;
                }
                //CORRECTION ACCEL
                iCorr += 1;
            } break;
        case "left":
            if upcheck and leftcheck floor_direction = 90;
            if upcheck and rightcheck floor_direction = 0;
            if downcheck and leftcheck floor_direction = 180;
            if downcheck and rightcheck floor_direction = 270;
            //if no collision is found, find new floor
            if !upcheck and !downcheck and !leftcheck and !rightcheck{
                switch(floor_direction){
                case 0:
                    x+=1; floor_direction = 90; break;
                case 90:
                    y-=1; floor_direction = 180; break;
                case 180:
                    x-=1; floor_direction = 270; break;
                case 270:
                    y+=1; floor_direction = 0; break;
                }
                //CORRECTION ACCEL
                iCorr += 1;
            } break;
    }
    
    //decide direction of movement
    switch(move_direction){
        case "right":
            switch(floor_direction){
            case 0: move_angle = 90; break;
            case 90: move_angle = 180; break;
            case 180: move_angle = 270; break;
            case 270: move_angle = 0; break;
            }
            break;
        case "left":
            switch(floor_direction){
            case 0: move_angle = 270; break;
            case 90: move_angle = 0; break;
            case 180: move_angle = 90; break;
            case 270: move_angle = 180; break;
            }
            break;
    }
    
    //move the object up to contact or corner
    hspd = 0;
    vspd = 0;
    switch(move_angle){
        case 0:
            hspd = 1; break;
        case 90:
            vspd = -1; break;
        case 180:
            hspd = -1; break;
        case 270:
            vspd = 1; break;
    }
    
    //floor check
    var floor_check = true;
    switch(floor_direction){
        case 0: floor_check = place_meeting(x+1,y,obj_wall); break;
        case 90: floor_check = place_meeting(x,y-1,obj_wall); break;
        case 180: floor_check = place_meeting(x-1,y,obj_wall); break;
        case 270: floor_check = place_meeting(x,y+1,obj_wall); break;
    }
    
    //horizontal movement
    //while not colliding against a wall, standing on a surface
    if (!place_meeting(x+sign(hspd),y+sign(vspd),obj_wall) and floor_check){
        x += hspd;
        y += vspd;
        //CORRECTION ACCEL
        iCorr += 2;
    }
}
iCorr = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
